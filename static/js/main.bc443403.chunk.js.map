{"version":3,"sources":["components/Nav.js","components/reusedComponents/Title.js","components/pages/JobList.js","components/reusedComponents/Block.js","components/pages/JobCard.js","components/pages/Profile.js","App.js","constants/routes.js","serviceWorker.js","index.js"],"names":["Nav","props","userName","firstName","lastName","className","alt","src","to","Title","value","onClick","jobSet","title","body","JobList","useState","user","jobs","setJobs","userId","workerId","useEffect","axios","get","then","res","data","availJobs","map","job","key","jobId","jobTitle","name","company","setJob","class","Block","icon","body2","list","icon2","JobCard","jobDetails","req","requirements","shift1Start","Date","shifts","startDate","shift2End","endDate","start","dateFormat","toUpperCase","end","imageUrl","Number","parseFloat","milesToTravel","toFixed","wagePerHourInCents","address","formattedAddress","reportTo","phone","post","console","log","Profile","zoneId","phoneNumber","maxJobDistance","App","setUser","path","e","target","getAttribute","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc443403.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Nav(props) {\n    \n    const userName = props.firstName + ' ' + props.lastName\n\n    return(\n        <div className=\"nav\">        \n            <img alt='logo' className='logo' src=\"https://www.swipejobs.com/images/logo-name.png\" />       \n            <div className=\"part2\">\n            <Link to='/'>\n                <h2 className=\"user\">{userName}</h2>\n            </Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Nav;","import React from 'react';\n\nfunction Title(props) {\n    \n    //reusable component for title blocks\n   \n    return(\n        <div value={props.value} onClick={props.jobSet} className=\"title\">\n            <h2 value={props.value}>{props.title}</h2>\n            <h4 value={props.value}>{props.body}</h4>\n        </div>\n    )\n}\nexport default Title;","import React, {useState, useEffect} from 'react';\n\nimport axios from 'axios'\nimport {Link} from 'react-router-dom';\nimport Title from '../reusedComponents/Title';\n\n\nfunction JobList(props) {\n\nconst [user, setUser] = useState(props.user);\nconst [jobs, setJobs] = useState(null);\n\n\n\nlet userId = user ? user.workerId : '';\n\nuseEffect(() => {\n    //axios request to get matched jobs for the user. then set as jobs with hooks\n    axios.get(`https://test.swipejobs.com/api/worker/${userId}/matches`).then(res => {\n        setJobs(res.data)\n    })\n}, []);\n\n    //below if statement checks for state before running following code\n    if (!jobs) {\n        return ''\n    }\n    //map out data from the axios request.\n    const availJobs = jobs.map(job => {\n    return <Link key={job.jobId} value={job.jobId} to='/job' >\n                <Title\n                    title={job.jobTitle.name}\n                    body={job.company.name}\n                    value={job.jobId}\n                    jobSet={props.setJob}\n                    class={'link'}\n                />\n                <hr />\n            </Link>\n    })\n\n    return(\n        <div className='job'>\n        <Title\n            title={'Matched Jobs'}\n        />\n        {availJobs}     \n        </div>\n\n    )\n}\n\nexport default JobList;","import React from 'react';\n\nfunction Block(props) {\n    \n    //reusable component displaying a range of data and content\n    if (!props) {\n        return ''\n    }\n    return(\n        <div value={props.value} onClick={props.jobSet} className=\"block\">\n            <i className={props.icon}></i>\n            <span value={props.value} className=\"flex\">\n                <h4 value={props.value} >{props.title}</h4>\n                <p value={props.value} >{props.body}</p>\n                <p>{props.body2}</p>\n                <ul>{props.list}</ul>\n            </span>\n            <i className={props.icon2}></i>\n\n        </div>\n    )\n}\nexport default Block;","import React, {useState, useEffect} from 'react';\n\nimport axios from 'axios';\nimport Block from '../reusedComponents/Block';\nimport Title from '../reusedComponents/Title';\nimport dateFormat from 'dateformat';\nimport {Link} from 'react-router-dom';\n\n\nfunction JobCard(props) {\n  \n  const [jobs, setJobs] = useState(null)\n  const userId = props.workerId\n\n  useEffect(() => {\n    axios.get(`https://test.swipejobs.com/api/worker/${userId}/matches`).then(res => {\n        setJobs(res.data)   \n    })\n  }, []);\n\n  // function to accept job and post to API\n  const acceptJob = () => {\n    axios.post(`https://test.swipejobs.com/api/worker/${userId}/job/${props.jobId}/accept`).then(res => {\n      console.log('accept');\n      \n    })\n  } \n\n    // function to reject job and post to API\n  const rejectJob = () => {\n    axios.post(`https://test.swipejobs.com/api/worker/${userId}/job/${props.jobId}/reject`).then(res => {\n      console.log('reject');\n    })\n  }\n\n\n  //Below map function runs through data of matched job. then returns a block of html code to render on the job page.\nif (jobs) {\n  var jobDetails = jobs.map( job => {\n    if (job.jobId === props.jobId) {\n      let req = 'N/A'\n      if (job.requirements) {\n        req = (job.requirements).map( req => {\n        return <li key={req}>{req}</li>\n\n        })\n      }\n      \n      \n      let shift1Start = new Date(job.shifts[0].startDate)\n      let shift2End = new Date(job.shifts[0].endDate)\n\n      //used dateFormat to format start and finish times to correct date and time format\n      let start = (dateFormat(shift1Start, \"UTC:mmm d, ddd h:MM TT\")).toUpperCase();\n      let end = (dateFormat(shift2End, \"UTC:h:MM TT\")).toUpperCase();\n      \n      \n      return <div key={job.jobId}>\n              <div className=\"hero\">\n                <img className=\"hero ui fluid image\" src={job.jobTitle.imageUrl} />\n              </div>\n              <Title\n                title={job.jobTitle.name}\n                body={job.company.name}\n              />\n              <div className=\"  highlight\">\n                <div className=\"part\">\n                    <h4>Distance</h4>\n                    <p>{Number.parseFloat(job.milesToTravel).toFixed(2)} miles</p>\n                </div>\n                <div className=\"part2\">\n                    <h4>Hourly Rate</h4>\n                    <p>${Number.parseFloat(job.wagePerHourInCents/100).toFixed(2)}</p>\n                </div>\n              </div>\n              <Block\n                icon={'calendar alternate icon'}\n                title={'Shift Dates'}\n                body={start + ' - ' + end}\n                body2={start + ' - ' + end}\n               />\n              <hr/>\n              <Block\n                icon={'map marker icon alternate'}\n                title={'Location'}\n                body={job.company.address.formattedAddress}\n                body2={`${Number.parseFloat(job.milesToTravel).toFixed(2)} miles from your job search location`}\n                icon2={'chevron right icon'}\n              />\n              <hr/>\n              <Block\n                icon={'wrench icon'}\n                title={'Requirements'}\n                list={req}\n              />\n              <hr/>\n              <Block\n                icon={'user circle icon'}\n                title={'Report to'}\n                body={`${job.company.reportTo.name} ${job.company.reportTo.phone}`}\n              />\n            </div>\n    }\n  })\n}\n\n\n    \n    return(\n        <div className=\"job \">\n            {jobDetails}\n            <div className=\" actions\">\n                <Link to='/joblist' onClick={rejectJob} className=\"big ui grey basic button\">No Thanks</Link>\n                <Link to='/joblist' onClick={acceptJob} className=\"big ui secondary button\">I'll Take It</Link>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default JobCard;\n","import React from 'react';\n\nimport {Link} from 'react-router-dom';\nimport Title from '../reusedComponents/Title';\nimport Block from '../reusedComponents/Block';\n\n\nfunction Profile(props) {\n\n    \n    return(\n        <div className=\"job\">\n            \n            <Title\n                title={props.firstName + ' ' +props.lastName}\n            />\n            \n            {/* reusable clock component. passed data as props to then render. helps keep code DRY */}\n            <Block\n                icon={'map marker icon alternate'}\n                title={'Address'}\n                body={props.address.formattedAddress}\n                body2={props.address.zoneId}\n              />\n             <hr />\n              <Block\n                icon={'phone icon'}\n                title={'Mobile Number'}\n                body={props.phoneNumber}\n              />\n            <hr />\n            <Block\n                icon={'search icon'}\n                title={'Max Job Distance'}\n                body={`${props.maxJobDistance} miles`}\n            />\n            <div className=\" actions\">\n                <Link to='/joblist' className=\"link big ui secondary button\">Find Jobs</Link>\n            </div>\n        </div>\n    )\n}\n\nexport default Profile;","import React, {useState, useEffect} from 'react';\n\n//imported libraries\nimport { HashRouter as Router, Route} from 'react-router-dom';\nimport axios from 'axios';\nimport * as ROUTES from './constants/routes';\n\n//imported comonents\nimport './App.scss';\nimport Nav from './components/Nav';\nimport JobList from './components/pages/JobList';\nimport JobCard from './components/pages/JobCard';\nimport Profile from './components/pages/Profile';\n\nfunction App() {\n\n  const url = 'https://test.swipejobs.com/api/worker/7f90df6e-b832-44e2-b624-3143d428001f/profile'\n\n  //hooks to set state without using a react component\n  const [user, setUser] = useState(null);\n  const [job, setJob] = useState(null);\n\n  useEffect(() => {\n\n    //initial axios request to get user information to be passed through app.\n    axios.get(url).then((res) => {\n      setUser(res.data)\n    })\n    \n  }, []);\n\n  //function to grab jobId on click. this is passed down to the jobList component\n  const handleJobChange = e => {\n    setJob(e.target.getAttribute('value'))\n  }\n\n  //if statement to ensure user state is set before rendering components and passing props.\n  if (!user) {\n    return ''\n  }\n  return (\n    //react router for easy linking between pages. navigation\n    <Router>\n    <div className=\"container\">\n      <Nav {...user} />\n      <div className=\"body\">\n        <Route path={ROUTES.JOBLIST}>\n          <JobList \n           setJob = {handleJobChange}\n            user = {user} \n          />\n        </Route>\n        <Route path={ROUTES.JOB}>\n          <JobCard \n          jobId = {job}\n          {...user} \n          />\n        </Route>  \n        <Route exact path={ROUTES.PROFILE}>\n          <Profile\n          {...user} \n          />\n        </Route>\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","export const JOBLIST = '/joblist';\nexport const JOB = '/job';\nexport const PROFILE = '/';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}